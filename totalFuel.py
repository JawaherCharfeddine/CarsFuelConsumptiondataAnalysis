# -*- coding: utf-8 -*-
"""fuel_consumption.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e_cNSgR9WLAMnf8M9-UHBBGWcxtfZtqg
"""
"""
Total fuel consumption"""


import pandas as pd
import pandas_datareader as data
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path
import os
import csv
import math
from statistics import *

def vehicles_in_sim(input):
  df = pd.read_csv(input)
  v_id = df['id']
  v_id = list(v_id)
  v_list = []
  for id in v_id:
    if id not in v_list:
      v_list.append(id)
  #print("len:", len(v_list), "|", v_list)
  return v_list


def total_fuel_consumption(output, input):
  df = pd.read_csv(input)
  fuel_values = df['fuel']
  fuel_values = list(fuel_values)
  step = df['time']
  step = list(step)
  v_id = df['id']
  v_id = list(v_id)
  d = {}
  dstp = {}
  j = 1
  fuel_cons = 0
  #print(len(step))
  i = 0
  v_list = vehicles_in_sim(input)
  #print(type(v_list))
  #print(v_list)
  d_vs_list = {}
  for v in v_list:
    d_vs_list[v] = 0.0
  for stp in step[: len(step) - 2]:
      #print("fuel", d_vs_list[v_id[i]])
      if fuel_values[i] != 0.0 and d_vs_list[v_id[i]] < fuel_values[i]:
        d_vs_list[v_id[i]] = fuel_values[i]
      #print("stp", stp, "|", d_vs_list)
      i += 1
      if stp != step[i+1]:
        d[stp] = {'fuel':  sum(d_vs_list.values())}
  df = pd.DataFrame.from_dict(d,orient="index")
  df.to_csv(output)
  
  
def fuel_plots(conv_path, adapt_path):
  df = pd.read_csv(conv_path)
  timestep = list(df.iloc[:, 0])
  fuel = list(df['fuel'])


  z = [m/500 for m in fuel]
  fig, ax = plt.subplots(num=0, dpi=80, figsize=(10, 5))
  ax.grid(True, which="both", linestyle='--')
  ax.plot(timestep[60:600], z[60:600], label='modèle conventionnel')

  df = pd.read_csv(adapt_path)
  timestep = list(df.iloc[:, 0])
  fuel = list(df['fuel'])


  z = [m/500 for m in fuel]
  ax.grid(True, which="both", linestyle='--')
  ax.plot(timestep[60:600], z[60:600], label='modèle adaptive')
  #plt.yscale('log')
  ax.set_xlabel('seconds')
  ax.set_ylabel('ml/s')
  ax.legend()
  plt.title('consommation de carburant')
  plt.savefig("fuel_consumption")

total_fuel_consumption("fuelwith.csv", "emissionwith.csv")
total_fuel_consumption("fuelwithout.csv", "emissionwithout.csv")
fuel_plots("fuelwithout.csv", "fuelwith.csv")


